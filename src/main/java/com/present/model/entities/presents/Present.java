package com.present.model.entities.presents;

import java.util.*;
import java.util.stream.Collectors;

import com.present.model.entities.present_containers.IPresentContainer;
import com.present.model.entities.present_items.IPresentItem;
import static com.present.controller.util.Constants.CENTS;


/**
 * An abstract present which represents a collection of present items
 * @see com.present.model.entities.presents.CustomPresent
 * @see com.present.model.entities.presents.AutoGeneratedPresent
 */
public abstract class Present {
    /**
     * weight of the present
     */
    protected int weight;
    /**
     * container for the present
     */
    protected IPresentContainer container;
    /**
     * collection of present items with their number
     */
    protected Map<IPresentItem,Integer> packagedPresent = new HashMap<>();


    public int getWeight(){
        return packagedPresent.entrySet().stream()
                .map(x -> x.getKey().getWeight() * x.getValue())
                .reduce((x,y) -> x+y)
                .orElse(0);
    }

    public Map<IPresentItem, Integer> getPackagedPresent() {
        return packagedPresent;
    }

    /**
     * Checks if container max weight allows to add more present items
     * @param item present item for checking
     * @param number of present item to be checked for adding
     * @return true if container capable to absorb specified number of present items and false if not
     *
     */
    private boolean hasEnoughSpace(IPresentItem item, int number){
        return (this.weight + item.getWeight() * number) <= container.getMaxWeight();
    }

    public abstract void createPresent(List<IPresentItem> presentItems);

    public abstract void createPresent(Map<IPresentItem,Integer> presentItems);

    /**
     * Adds the specific number of present items into the present.
     * Adds either all items (return true) or neither if there is not enough space for all (returns false)
     * @param item to be added to the present
     * @param number of specified items to be added
     * @return true if all present items are added and false otherwise
     * @throws NullPointerException if object is null
     */
    protected boolean addToPresent(IPresentItem item, int number){
        Objects.requireNonNull(item);
        if(this.hasEnoughSpace(item,number)) {
            this.packagedPresent.put(item,packagedPresent.getOrDefault(item,0) + number);
            this.weight += item.getWeight() * number;
            return true;
        }
        return false;
    }

    public double getPrice(){
        return ((double) packagedPresent.entrySet().stream()
                .map(x -> x.getKey().getPrice() * x.getValue())
                .reduce((x,y) -> x+y)
                .orElse(0)) / CENTS;
    }


}
